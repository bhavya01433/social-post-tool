import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const { accessToken, memberUrn, imageBase64, text } = await req.json();
    if (!accessToken || !memberUrn || !imageBase64 || !text) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    // 1. Register upload
    const registerRes = await fetch(
      "https://api.linkedin.com/v2/assets?action=registerUpload",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          "X-Restli-Protocol-Version": "2.0.0",
        },
        body: JSON.stringify({
          registerUploadRequest: {
            owner: memberUrn,
            recipes: ["urn:li:digitalmediaRecipe:feedshare-image"],
            serviceRelationships: [
              {
                relationshipType: "OWNER",
                identifier: "urn:li:userGeneratedContent",
              },
            ],
            supportedUploadMechanism: ["SYNCHRONOUS_UPLOAD"],
          },
        }),
      }
    );
    const registerData = await registerRes.json();
    if (!registerRes.ok) {
      return NextResponse.json(
        { error: "Register upload failed", details: registerData },
        { status: 500 }
      );
    }
    const uploadUrl =
      registerData.value.uploadMechanism[
        "com.linkedin.digitalmedia.uploading.MediaUploadHttpRequest"
      ].uploadUrl;
    const asset = registerData.value.asset;

    // 2. Upload the image (base64 to buffer)
    const buffer = Buffer.from(imageBase64, "base64");
    const uploadRes = await fetch(uploadUrl, {
      method: "PUT",
      headers: {
        "Content-Type": "image/png",
        "Content-Length": buffer.length.toString(),
      },
      body: buffer,
    });

    if (!uploadRes.ok) {
      const uploadErr = await uploadRes.text();
      return NextResponse.json(
        { error: "Image upload failed", uploadErr },
        { status: 500 }
      );
    }

    // 2.5. Poll for asset readiness (recommended by LinkedIn)
    let assetReady = false;
    for (let i = 0; i < 5; i++) {
      const assetId = asset.split(":").pop();
      const assetRes = await fetch(
        `https://api.linkedin.com/v2/assets/${assetId}`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      const assetData = await assetRes.json();
      if (assetData.status === "READY") {
        assetReady = true;
        break;
      }
      await new Promise((r) => setTimeout(r, 1000)); // wait 1s
    }
    if (!assetReady) {
      return NextResponse.json(
        { error: "Asset not ready after upload" },
        { status: 500 }
      );
    }

    // 3. Create the UGC Post
    const postRes = await fetch("https://api.linkedin.com/v2/ugcPosts", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
        "X-Restli-Protocol-Version": "2.0.0",
      },
      body: JSON.stringify({
        author: memberUrn,
        lifecycleState: "PUBLISHED",
        specificContent: {
          "com.linkedin.ugc.ShareContent": {
            shareCommentary: {
              text: text,
            },
            shareMediaCategory: "IMAGE",
            media: [
              {
                status: "READY",
                media: asset,
                description: { text: "Image generated by Gemini AI" },
                title: { text: "AI Generated Image" },
              },
            ],
          },
        },
        visibility: {
          "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC",
        },
      }),
    });
    const postData = await postRes.json();

    if (!postRes.ok) {
      return NextResponse.json(
        { error: "Post creation failed", details: postData },
        { status: 500 }
      );
    }

    return NextResponse.json({ success: true, postData });
  } catch (err: any) {
    return NextResponse.json(
      { error: err.message || "Unknown error" },
      { status: 500 }
    );
  }
}
